plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// Maps API Key Config
Properties properties = new Properties()
def file = project.rootProject.file("local.properties")
if (file.exists()){
    properties.load(new FileInputStream(file))
}

def mapsApiKey = properties.getProperty("MAPS_API_KEY")


// Upload Key Config [App SIgning Configurations]
Properties keyProperties = new Properties()
def keyStorePropertiesFile = project.rootProject.file("key.properties")
if (keyStorePropertiesFile.exists()) {
    keyProperties.load(new FileInputStream(keyStorePropertiesFile))
}



android {
    namespace = "com.example.ball"
    compileSdk = 35
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.ball"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        

        // += works to add to the already exisiting manifestPlaceholders
        // This is used to pass the Maps API Key to the AndroidManifest.xml
        manifestPlaceholders += [
            mapsApiKeyPlaceholder: mapsApiKey,
            
            ]
    }

// App Signing Configurations Derived from key.properties
    signingConfigs{
        create("release") {
            keyAlias = keyProperties["keyAlias"] as String
            keyPassword = keyProperties["keyPassword"] as String
            storeFile = keyProperties["storeFile"] as File
            storePassword = keyProperties["storePassword"] as String
            // project.rootProject.file(keyStoreProperties["storeFile"]) : null
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            
            signingConfig = signingConfigs.getByName("release")
            }
        debug {
            signingConfig = signingConfigs.debug
        }
    }
}

flutter {
    source = "../.."
}
